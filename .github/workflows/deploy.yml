name: Build and Deploy with Manual Approval

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Amazon ECR
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

    - name: Build and Tag Docker Image
      env:
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      run: |
        IMAGE_TAG=latest
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    # This job will wait for manual trigger
    if: github.event_name == 'workflow_dispatch'
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to EC2 via SSH
      env:
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Pull the latest image from ECR
          sudo docker pull $ECR_REPOSITORY:latest

          # Stop and remove any existing container named "my-nginx-app"
          sudo docker stop my-nginx-app || true
          sudo docker rm my-nginx-app || true

          # Run the new container on port 80
          sudo docker run -d -p 80:80 --name my-nginx-app $ECR_REPOSITORY:latest
