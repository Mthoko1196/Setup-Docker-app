name: Terraform CI/CD with Manual Approval

on:
  push:
    branches:
      - main  # Run workflow on push to main branch

  workflow_dispatch:  # Allow manual triggering of this workflow

jobs:
  # Job 1: Terraform Initialization and Planning
  terraform-plan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3  # Use the latest version

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.4.5  # Specify your Terraform version

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -out=tfplan

    - name: Save Terraform Plan as an Artifact
      uses: actions/upload-artifact@v3  # Updated to the latest version
      with:
        name: tfplan
        path: tfplan

  # Job 2: Manual Approval and Terraform Apply
  terraform-apply:
    needs: terraform-plan  # This job depends on the success of the previous job
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'  # Ensure this job runs only when triggered manually

    steps:
    - name: Download Terraform Plan Artifact
      uses: actions/download-artifact@v3  # Updated to the latest version
      with:
        name: tfplan

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.4.5  # Specify your Terraform version

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform Apply
      run: terraform apply tfplan

  # Job 3: Deploy to EC2
  deploy:
    needs: terraform-apply  # This job depends on the success of the Terraform Apply job
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to EC2 via SSH
      env:
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Pull the latest Docker image from ECR
          sudo docker pull $ECR_REPOSITORY:latest

          # Stop and remove the existing container if it exists
          sudo docker stop my-nginx-app || true
          sudo docker rm my-nginx-app || true

          # Run the new Docker container on port 80
          sudo docker run -d -p 80:80 --name my-nginx-app $ECR_REPOSITORY:latest
