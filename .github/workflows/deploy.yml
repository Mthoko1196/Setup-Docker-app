name: Build, Deploy, and Provision EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Amazon ECR
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

    - name: Build and Tag Docker Image
      run: |
        docker build -t my-nginx-app .
        docker tag my-nginx-app:latest ${{ secrets.ECR_REPOSITORY }}:latest

    - name: Push Docker Image to ECR
      run: |
        docker push ${{ secrets.ECR_REPOSITORY }}:latest

    # Add Terraform steps for creating EC2 instance
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.4.5  # Update with your preferred Terraform version

    - name: Configure AWS credentials for Terraform
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

    - name: Get Terraform Outputs
      id: tf-output
      run: |
        terraform output -json > tf-output.json

    - name: Set EC2 Host as Environment Variable
      run: echo "EC2_HOST=$(jq -r '.ec2_public_ip.value' tf-output.json)" >> $GITHUB_ENV

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to EC2 via SSH
      env:
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ env.EC2_HOST }}  # Set dynamically from Terraform output
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Pull the latest image from ECR
          sudo docker pull $ECR_REPOSITORY:latest

          # Stop and remove any existing container named "my-nginx-app"
          sudo docker stop my-nginx-app || true
          sudo docker rm my-nginx-app || true

          # Run the new container on port 80
          sudo docker run -d -p 80:80 --name my-nginx-app $ECR_REPOSITORY:latest