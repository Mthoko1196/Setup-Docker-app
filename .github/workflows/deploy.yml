name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Adjust this to your primary branch

jobs:
  # Source Stage: Checkout Code
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

  # Build and Push Docker Image to ECR
  build_and_push:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Set your AWS region

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: "my_app_repo"
          IMAGE_TAG: "latest"
        run: |
          echo "ECR Registry: $ECR_REGISTRY"
          echo "Repository: $ECR_REPOSITORY"
          echo "Image Tag: $IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  # Manual Approval Stage
  approval:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Wait for approval
        uses: hmarr/auto-approve-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
    if: success()
    timeout-minutes: 60

  # Deploy to EC2
  deploy:
    runs-on: ubuntu-latest
    needs: approval
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: SSH into EC2 instance and deploy
        env:
          HOST: ${{ secrets.EC2_HOST }}
          KEY: ${{ secrets.EC2_SSH_KEY }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: "my_app_repo"
          IMAGE_TAG: "latest"
        run: |
          ssh -o "StrictHostKeyChecking=no" -i "$KEY" ec2-user@$HOST << EOF
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker stop web || true
            docker rm web || true
            docker run -d -p 80:80 --name web $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          EOF
